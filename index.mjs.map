{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isFunction from '@stdlib/assert-is-function';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar BEGIN = 0;\nvar END = 1e308;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which replaces all values from a provided iterator from a start index to an end index with a static value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {*} value - static value\n* @param {NonNegativeInteger} [begin=0] - start iteration index (inclusive)\n* @param {NonNegativeInteger} [end=1e308] - end iteration index (non-inclusive)\n* @throws {Error} must provide both an iterator and a static value\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} third argument must be a nonnegative integer\n* @throws {TypeError} fourth argument must be a nonnegative integer\n* @returns {Iterator} iterator\n*\n* @example\n* import randu from '@stdlib/random-iter-randu';\n*\n* var iter = iterFill( randu(), 3.14, 0, 2 );\n*\n* var r = iter.next().value;\n* // returns 3.14\n*\n* r = iter.next().value;\n* // returns 3.14\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterFill( iterator, value, begin, end ) {\n\tvar iter;\n\tvar FLG;\n\tvar N;\n\tvar M;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator protocol-compliant object. Value: `%s`.', iterator ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isNonNegativeInteger( begin ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', begin ) );\n\t\t}\n\t\tN = begin;\n\t\tif ( arguments.length > 3 ) {\n\t\t\tif ( !isNonNegativeInteger( end ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%s`.', end ) );\n\t\t\t}\n\t\t\tM = end;\n\t\t} else {\n\t\t\tM = END;\n\t\t}\n\t} else if ( arguments.length < 2 ) {\n\t\tthrow new Error( 'insufficient arguments. Must provide both an iterator and a static value.' );\n\t} else {\n\t\tN = BEGIN;\n\t\tM = END;\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', finish );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\ti = -1;\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\ti += 1;\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\treturn {\n\t\t\t'value': ( i >= N && i < M ) ? value : v.value,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction finish( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterFill( iterator[ iteratorSymbol ](), value, N, M );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterFill;\n"],"names":["END","iterFill","iterator","value","begin","end","iter","FLG","N","M","i","isIteratorLike","TypeError","format","arguments","length","isNonNegativeInteger","Error","setReadOnly","next","finish","iteratorSymbol","isFunction","factory","v","done"],"mappings":";;gmBAgCA,IACIA,EAAM,MAkCV,SAASC,EAAUC,EAAUC,EAAOC,EAAOC,GAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAgBT,GACrB,MAAM,IAAIU,UAAWC,EAAQ,+FAAgGX,IAE9H,GAAKY,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAsBZ,GAC3B,MAAM,IAAIQ,UAAWC,EAAQ,+EAAgFT,IAG9G,GADAI,EAAIJ,EACCU,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAsBX,GAC3B,MAAM,IAAIO,UAAWC,EAAQ,gFAAiFR,IAE/GI,EAAIJ,CACP,MACGI,EAAIT,CAEP,KAAQ,IAAKc,UAAUC,OAAS,EAC9B,MAAM,IAAIE,MAAO,6EAEjBT,EA5DU,EA6DVC,EAAIT,CACJ,CAWD,OARAkB,EADAZ,EAAO,CAAA,EACY,OAAQa,GAC3BD,EAAaZ,EAAM,SAAUc,GAGxBC,GAAkBC,EAAYpB,EAAUmB,KAC5CH,EAAaZ,EAAMe,EAAgBE,GAEpCb,GAAK,EACEJ,EAQP,SAASa,IACR,IAAIK,EACJ,OAAKjB,EACG,CACNkB,MAAQ,IAGVD,EAAItB,EAASiB,OACbT,GAAK,EACAc,EAAEC,MACNlB,GAAM,EACCiB,GAED,CACNrB,MAAWO,GAAKF,GAAKE,EAAID,EAAMN,EAAQqB,EAAErB,MACzCsB,MAAQ,GAET,CASD,SAASL,EAAQjB,GAEhB,OADAI,GAAM,EACDO,UAAUC,OACP,CACNZ,MAASA,EACTsB,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASF,IACR,OAAOtB,EAAUC,EAAUmB,KAAoBlB,EAAOK,EAAGC,EACzD,CACF"}